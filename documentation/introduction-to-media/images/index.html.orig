<!DOCTYPE html>
<<<<<<< HEAD

<html>
<!-- Mirrored from developers.google.com/web/fundamentals/documentation/introduction-to-media/images/index by HTTrack Website Copier/3.x [XR&CO'2013], Wed, 07 May 2014 09:54:11 GMT -->
<!-- Added by HTTrack -->

<head>
	<meta content="text/html; charset=utf-8" http-equiv="content-type">
	<!-- /Added by HTTrack -->
	<meta charset="utf-8"><!--[if lt IE 9]>
	<script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]-->

	<title>图片—谷歌网络开发基础</title>
	<meta content="" name="author">
	<meta content="" name="description">
	<link href="../../../favicon.ico" rel="icon">
	<meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
	<meta content="width=device-width, initial-scale=1" id="viewport" name=
	"viewport">
	<meta content="@chromium_dev">
	<link href="https://plus.google.com/+PeteLePage" rel="publisher">
	<meta content="Images — Google Web Fundamentals">
	<meta content="../../../../../imgs/lono.html">
	<meta content=
	"一幅图片胜过1000个单词，每个页面里图片都是一个主要部分。但它们也是需要加载的主要部分。响应式网络设计不仅能让我们的布局基于设备特性，也能够基于图片产生变化。">
	<link href="../../../css/styles.min.css" media="screen" rel="stylesheet">
	<style type="text/css">
img, video, object {
	max-width: 100%;
	}

	img.center {
	display: block;
	margin-left: auto;
	margin-right: auto;
	}
	</style>
	<style type="text/css">
p#noImage {
	margin-top: 2em;
	padding: 1em;
	padding-bottom: 2em;
	color: white;
	border-radius: 5px;
	box-shadow: 5px 5px 4px 0 rgba(9,130,154,0.2);
	background: linear-gradient(rgba(9, 130, 154, 1), rgba(9, 130, 154, 0.5));
	}
	</style>
</head>

<body class=
"page--article article--introduction-to-media theme--introduction-to-media">
	<header id="gc-googlebar">
		<div class="container">
			<a href="http://developers.google.com/" id="gc-logo"><img alt=
			"Google" src=
			"http://developers.google.com/_static/0f4dd8c48e/images/developers-logo.svg"></a>

			<p class="beta" id="beta">此站仍在开发当中！<br>
			<a href=
			"https://github.com/Google/WebFundamentals/issues/new?title=Issue%20in:%20/documentation/introduction-to-media/images/index.html"
			target="_blank">举报问题</a> 或者 <a href=
			"https://github.com/Google/WebFundamentals" target="_blank">查看代码</a>.</p>
		</div>
	</header>

	<header class="main-header">
		<h1 class="main-header__title"><a class="main-header__logo" href=
		"https://developers.google.com/web/fundamentals" title=
		"跳转至网络开发基础">网络开发基础</a></h1>

		<nav class="main-nav">
			<ul class="main-nav__list clear">
				<li class=
				"main-nav__item main-nav__item--web-fundamentals main-nav__item--home">
				<a class="main-nav__link" href="../../../index.html" title=
				"跳转至网络开发基础">网络开发基础</a></li>

				<li class="main-nav__item main-nav__item--getting-started">
				<a class="main-nav__link" href=
				"../../../getting-started/your-first-multi-screen-site/index.html"
				title="跳转至如何开始">如何开始？</a></li>

				<li class="main-nav__item main-nav__item--documentation">
					<a class="main-nav__link" href="../../index.html" title=
					"跳转至文档页">文档</a>

					<div class="main-nav__secondary-nav">
						<div class="main-nav__secondary-content">
							<div class="main-nav__link--explore-wrapper">
								<a class=
								"main-nav__link main-nav__link--child main-nav__link--explore"
								href="../../index.html" title=
								"查看文档">查看文档</a>
							</div>

							<div class="clear">
								<ul class=
								"main-nav__list--child g-medium--2 g-wide--2">
									<li class=
									"main-nav__item--child nav-theme--multi-device-layouts">
									<a class=
									"main-nav__link main-nav__link--child themed--hover"
									href=
									"../../multi-device-layouts/index.html"
									title=
									"跳转至多设备布局页">多设备布局</a></li>

									<li class=
									"main-nav__item--child nav-theme--user-input">
									<a class=
									"main-nav__link main-nav__link--child themed--hover"
									href="../../user-input/index.html" title=
									"跳转至表单及用户输入页">表单和用户输入</a></li>

									<li class=
									"main-nav__item--child nav-theme--introduction-to-media">
									<a class=
									"main-nav__link main-nav__link--child themed--hover"
									href="../index.html" title=
									"跳转至图片，视频和音频页">图片，视频和音频</a></li>

									<li class=
									"main-nav__item--child nav-theme--performance">
									<a class=
									"main-nav__link main-nav__link--child themed--hover"
									href="../../performance/index.html" title=
									"跳转至性能页">性能</a></li>
								</ul>
							</div>
						</div>
					</div>
				</li>

				<li class="main-nav__item main-nav__item--resources"><a class=
				"main-nav__link" href="../../../resources/index.html" title=
				"跳转至资源页">资源</a></li>
			</ul>
		</nav>
	</header>

	<div class="article-container">
		<div class="editorial-header">
			<div class="container">
				<div class="content">
					<nav class="breadcrumbs">
						<p><a href="../../index-2.html" title=
						"文档">文档</a> / <a href=
						"../index-2.html" title=
						"图片、音频、视频">图片、音频、视频</a>
						/</p>
					</nav>

					<h1 class="tag editorial-header__title">图片、音频、视频</h1>

					<h2 class="editorial-header__subtitle">图片</h2>

					<p class="editorial-header__excerpt">一幅图片胜过1000个单词，每个页面里图片都是一个主要部分。但它们也是需要加载的主要部分。响应式网络设计不仅能让我们的布局基于设备特性，也能够基于图片产生变化。</p>
				</div>
			</div>
		</div>

		<div class="container">
			<div class="content">
				<div class="toc">
					<h3 class="toc__title">在这节课程里</h3>

					<ol class="toc__list list-anchor" id="toc">
						<li><a href="#images-in-css">CSS中的图片</a></li>

						<li><a href="#images-in-markup">标识中的图片</a></li>

						<li><a href="#avoid-images-completely">完全避免图片</a></li>

						<li><a href="#optimize-images-for-performance">优先展示图片</a></li>
					</ol>
				</div>

				<h3 id="responsive-images">响应式图片</h3>

			   
				<p>响应式的网络设计不仅仅意味着我们的布局能够基于设备特性产生变化，网页内容也要随之改变。举例来讲，在高分辨率（2x）显示下，高分辨率的图表需要保证清晰度。在浏览器宽度为800像素时，一张宽度设置为50%图片展示效果可能只是马马虎虎，但在宽度较窄的手机上它会占据太多空间，并在适应更小尺寸屏幕时依然会占据同样大的带宽。</p>

				<h3 id="art-direction">艺术指导</h3>

				<p><img alt="Art direction example" class="center" src=
				"img/art-direction.png"></p>

				<p>在另一些情况下图片可能需要大幅度的变化：改变比例、裁剪甚至整张替换。在这些情况下，改变图片通常涉及到艺术指导。参阅<a href=
				"http://responsiveimages.org/demos/">responsiveimages.org/demos/</a>查看更多示例。
				</p>
			</div>
		</div>

		<div class=
		"highlight-module highlight-module--left highlight-module--learning">
			<div class="highlight-module__container icon-star">
				<div class=
				"highlight-module__content g-wide--push-1 g-wide--pull-1 g-medium--push-1">
				<p class="highlight-module__title">关键技术简介</p>

					<ul class="highlight-module__list">
						
						<li>根据设备屏幕大小，分辨率以及页面布局决定使用最佳的展示图片。</li>

		
						<li>通过media queries查询<code>min-resolution</code>以及<code>-webkit-min-device-pixel-ratio</code>使用恰当的CSS样式为高分辨率设备改变<code>背景图片</code>。</li>

						<li>使用srcset为普通分辨率下的1x标注图片提供高分辨率的资源。</li>

						<li>当使用Javascript图片替换技术，或者使用高压缩的高分辨率图片来适应低分辨率设备时，要考虑设备上展示图片的质量损耗。</li>
					</ul>

				</div>
			</div>
		</div>

		<div class="container">
			<div class="content">
				<h2 id="images-in-css">CSS中的图片</h2>

				<p>为元素使用复杂的图片时，CSS样式中的<code>background</code>属性十分强大，能让图片重复甚至更多。当该属性与media queries联合使用时，能基于屏幕分辨率、展示区大小或者其他为设备加载最合适的图片。</p>
				<h3 id=
				"use-media-queries-for-conditional-image-loading-or-art-direction">
				使用media queries（设备查询）来加载条件响应的图片或者艺术指导。</h3>

				<p>Media queries（设备查询）不仅仅影响页面布局，也用来根据视窗宽度对应加载图片，或者提供艺术指导。</p>

				<p>用以下的示例进行说明， 在较小的屏幕上，只有
				<code>small.png</code>会被加载放入到
				<code>div</code>元素中, 在较大的屏幕上时,
				<code>background-image: url(body.png)</code>会被加载到body元素上并且<code>background-image: url(large.png)</code>被加载到内容<code>div</code>元素中。</p>
			</div>
		</div>

		<div class=
		"highlight-module highlight-module--code highlight-module--right">
			<div class="highlight-module__container">
				<div class="highlight">
					<pre>
<code class="html">    <span class="nc">.example</span> <span class=
"p">{</span>
	  <span class="k">height</span><span class="o">:</span> <span class=
"m">400px</span><span class="p">;</span>
	  <span class="k">background-image</span><span class=
"o">:</span> <span class="sx">url(small.png)</span><span class="p">;</span>
	  <span class="k">background-repeat</span><span class=
"o">:</span> <span class="k">no-repeat</span><span class="p">;</span>
	  <span class="k">background</span><span class="o">-</span><span class=
"k">size</span><span class="o">:</span> <span class=
"n">contain</span><span class="p">;</span>
	  <span class="k">background-position</span><span class=
"o">-</span><span class="n">x</span><span class="o">:</span> <span class=
"k">center</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">@media</span> <span class="o">(</span><span class=
"nt">min-width</span><span class="o">:</span> <span class=
"nt">500px</span><span class="o">)</span> <span class="p">{</span>
	  <span class="nt">body</span> <span class="p">{</span>
		<span class="k">background-image</span><span class=
"o">:</span> <span class="sx">url(body.png)</span><span class="p">;</span>
	  <span class="p">}</span>
	  <span class="nc">.example</span> <span class="p">{</span>
		<span class="k">background-image</span><span class=
"o">:</span> <span class="sx">url(large.png)</span><span class="p">;</span>
	  <span class="p">}</span>
	<span class="p">}</span>
	
</code>
</pre>
				</div><a class="highlight-module__cta" href=
				"https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/conditional-mq">查看完整示例</a>
			</div>
		</div>

		<div class="container">
			<div class="content">
				<h3 id="use-image-set-to-provide-high-res-images">使用image-set
				提供高分辨率图片</h3>

				<p>在CSS样式中使用<code>image-set()</code>提高<code>background</code>属性的表现能力, 让不同的设备特性选择不同的图片变得更加容易。这允许浏览器根据设备特性选择最佳图片，例如在2x的展示区使用2x的图片，或者在一个带宽受限的2x的设备上使用1x的图片。</p>

				<div class="highlight">
					<pre>
<code class="css"><span class="nt">background-image</span><span class=
"o">:</span> <span class="nt">image-set</span><span class="o">(</span>
  <span class="nt">url</span><span class="o">(</span><span class=
"nt">icon1x</span><span class="nc">.jpg</span><span class=
"o">)</span> <span class="nt">1x</span><span class="o">,</span>
  <span class="nt">url</span><span class="o">(</span><span class=
"nt">icon2x</span><span class="nc">.jpg</span><span class=
"o">)</span> <span class="nt">2x</span>
<span class="o">);</span>
</code>
</pre>
				</div>

				<p>加载合适的图片后，浏览器将图片进行相应的缩放。换句话说，浏览器假定2x的图片有两倍的1x的图片尺寸，并将2x的图片以2作为基数进行等比例缩小，这样图片就能在页面上等大呈现。</p>

				<p>浏览器对<code>image-set()</code>的支持仍处于发展中，现在只有以
				<code>-webkit</code>作为渲染内核的Chrome浏览器和Safari浏览器对该属性进行支持。 我们必须考虑当浏览器无法支持<code>image-set()</code> 属性时我们应该有备用的图片，举例说明：</p>
			</div>
		</div>

		<div class=
		"highlight-module highlight-module--code highlight-module--right">
			<div class="highlight-module__container">
				<div class="highlight">
					<pre>
<code class="html">    <span class="nc">.sample</span> <span class="p">{</span>
	  <span class="k">width</span><span class="o">:</span> <span class=
"m">128px</span><span class="p">;</span>
	  <span class="k">height</span><span class="o">:</span> <span class=
"m">128px</span><span class="p">;</span>
	  <span class="k">background-image</span><span class=
"o">:</span> <span class="sx">url(icon1x.png)</span><span class="p">;</span>
	  <span class="k">background-image</span><span class=
"o">:</span> <span class="o">-</span><span class="n">webkit</span><span class=
"o">-</span><span class="n">image</span><span class="o">-</span><span class=
"n">set</span><span class="p">(</span>
		<span class="sx">url(icon1x.png)</span> <span class=
"m">1</span><span class="n">x</span><span class="o">,</span>
		<span class="sx">url(icon2x.png)</span> <span class=
"m">2</span><span class="n">x</span>
	  <span class="p">);</span>
	  <span class="k">background-image</span><span class=
"o">:</span> <span class="n">image</span><span class="o">-</span><span class=
"n">set</span><span class="p">(</span>
		<span class="sx">url(icon1x.png)</span> <span class=
"m">1</span><span class="n">x</span><span class="o">,</span>
		<span class="sx">url(icon2x.png)</span> <span class=
"m">2</span><span class="n">x</span>
	  <span class="p">);</span>
	<span class="p">}</span>
	
</code>
</pre>
				</div><a class="highlight-module__cta" href=
				"https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/image-set">查看完整示例</a>
			</div>
		</div>

		<div class="container">
			<div class="content">

				<p>以上将合适的资源加载到支持image-set的浏览器，否则以1x的大小进行内容加载。重点提示当浏览器对<code>image-set()</code>的支持比较低时，大多数的浏览器都将会加载1x的资源。</p>

				<h3 id=
				"use-media-queries-to-provide-high-res-images-or-art-direction">
				使用media queries提供高分辨率图片或者艺术指导</h3>


				<p>多媒体查询将基于<a href=
				"http://www.html5rocks.com/en/mobile/high-dpi/#toc-bg">设备像素比</a>进行规则定义, 使将不同尺寸的图片进行1x或者2x展示变得更加容易。</p>

				<div class="highlight">
					<pre>
<code class="css"><span class="k">@media</span> <span class=
"o">(</span><span class="nt">min-resolution</span><span class=
"o">:</span> <span class="nt">2dppx</span><span class="o">),</span>
<span class="o">(</span><span class=
"nt">-webkit-min-device-pixel-ratio</span><span class="o">:</span> <span class=
"nt">2</span><span class="o">)</span>
<span class="p">{</span>
  <span class="c">/* High dpi styles &amp; resources here */</span>
<span class="p">}</span>
</code>
</pre>
				</div>

				<p>Chrome, Firefox以及Opera都支持
				<code>(min-resolution: 2dppx)</code>标准, 但Safari以及Android
				浏览器需要提供不带<code>dppx</code>前缀的旧式语法的代理。请记住这些样式只有当设备符合多媒体查询条件时才会得以展示，你必须写好基本样式。这样也能够保证当浏览器不支持多媒体查询分辨率特性时，一些内容仍然可以被渲染展示。</p>
			</div>
		</div>

		<div class=
		"highlight-module highlight-module--code highlight-module--right">
			<div class="highlight-module__container">
				<div class="highlight">
					<pre>
<code class="html">    <span class="nc">.sample</span> <span class="p">{</span>
	  <span class="k">width</span><span class="o">:</span> <span class=
"m">128px</span><span class="p">;</span>
	  <span class="k">height</span><span class="o">:</span> <span class=
"m">128px</span><span class="p">;</span>
	  <span class="k">background-image</span><span class=
"o">:</span> <span class="sx">url(icon1x.png)</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">@media</span> <span class="o">(</span><span class=
"nt">min-resolution</span><span class="o">:</span> <span class=
"nt">2dppx</span><span class="o">),</span> <span class=
"c">/* Standard syntax */</span>
	<span class="o">(</span><span class=
"nt">-webkit-min-device-pixel-ratio</span><span class="o">:</span> <span class=
"nt">2</span><span class="o">)</span>  <span class=
"c">/* Safari &amp; Android Browser */</span>
	<span class="p">{</span>
	  <span class="nc">.sample</span> <span class="p">{</span>
		<span class="k">background</span><span class="o">-</span><span class=
"k">size</span><span class="o">:</span> <span class=
"n">contain</span><span class="p">;</span>
		<span class="k">background-image</span><span class=
"o">:</span> <span class="sx">url(icon2x.png)</span><span class="p">;</span>
	  <span class="p">}</span>
	<span class="p">}</span>
	
</code>
</pre>
				</div><a class="highlight-module__cta" href=
				"https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/media-query-dppx">查看完整示例</a>
			</div>
		</div>

		<div class="container">
			<div class="content">

				<p>你也可以根据展示区大小使用min-width来进行不同大小的图片。这项技术的好处在于，当多媒体查询不符合时图片不会被加载。举例来讲，只有在浏览器宽度在500像素以上时，图片文件<code>bg.png</code>才会被加载到<code>body</code>元素上。</p>

				<div class="highlight">
					<pre>
<code class="css"><span class="k">@media</span> <span class=
"o">(</span><span class="nt">min-width</span><span class=
"o">:</span> <span class="nt">500px</span><span class="o">)</span> <span class=
"p">{</span>
  <span class="nt">body</span> <span class="p">{</span>
	<span class="k">background-image</span><span class=
"o">:</span> <span class="sx">url(bg.png)</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code>
</pre>
				</div>

				<h2 id="images-in-markup">标识中的图片</h2>

				<p><code>img</code>元素是很强大的——被下载，解码然后渲染展示到内容区域——现代的浏览器支持一系列的图片格式。包括跨设备表现出与桌面展示一致的效果，这些仅仅需要一些细微的调整就能保证好的用户体验。</p>

				<p>请记住当指明图片宽度时，为防止图片超出展示区，应使用相关联的单元。比如，<code>width: 50%;</code>,将会使图片宽度达到容器元素（并非展示区或者实际像素大小）的50%大小。</p>

				<p>由于CSS样式允许元素内容溢出该元素的容器，因此我们可能需要使用max-width：100%来防止图片或者其他内容溢出。举例来讲：</p>

				<div class="highlight">
					<pre>
<code class="css"><span class="nt">img</span><span class=
"o">,</span> <span class="nt">embed</span><span class="o">,</span> <span class=
"nt">object</span><span class="o">,</span> <span class=
"nt">video</span> <span class="p">{</span>
  <span class="k">max-width</span><span class="o">:</span> <span class=
"m">100</span><span class="o">%</span><span class="p">;</span>
<span class="p">}</span>
</code>
</pre>
				</div>


				<p>使用<code>img</code>元素的<code>alt</code>属性提供有意义的描述；这些描述能够让你的网站在屏幕阅读器以及其他辅助技术里被更好地理解。</p>

				<h3 id="enhance-imgs-with-srcset-for-high-dpi-devices">使用<code>srcset</code>在高分辨率的设备上加大
				<code>img</code>元素的宽度</h3>

				<p><code>srcset</code>属性能够增强<code>img</code>元素的表现效果, 让根据不同设备特性提供不同图片这一过程变得更加容易。同样，<a href=
				"#use-image-set-to-provide-high-res-images"><code>image-set</code>
				</a>也行之有效, <code>srcset</code>允许浏览器根据设备特性选择最佳图片，比如在2x的展示区使用2x的图片，在带宽受限的2x展示区使用1x的图片。</p>

				<div class="highlight">
					<pre>
<code class="html"><span class="nt">&lt;img</span> <span class=
"na">src=</span><span class="s">&quot;photo.png&quot;</span> <span class=
"na">srcset=</span><span class=
"s">&quot;photo@2x.png 2x&quot;</span> <span class=
"err">...</span> <span class="nt">/&gt;</span>
</code>
</pre>
				</div>

				<p>在不支持<code>srcset</code>的浏览器上,浏览器只会使用<code>src</code> 属性中指定的默认图片。
				这就是为什么任何时候，不管性能如何，在任何设备上我们都要保证1x的图片都可以进行展示这一做法的重要性。当<code>srcset</code>能够被支持时，以逗号分隔的图片选择条件可以被解析，让最合适的图片得以加载展示。</p>


				<p>从像素密度到展示区宽度等种种，选择条件众多，但现在的只有像素密度被很好地支持。为在当前表现以及未来的特性间平衡，我们坚持提供2x的图片。</p>

				<h3 id="other-image-techniques">其他图片技术</h3>

				<h4 id="compressive-images">图片压缩</h4>

				<p><a href=
				"http://www.html5rocks.com/en/mobile/high-dpi/#toc-tech-overview">
				图片压缩技术</a>能够将2x的图片进行高质量压缩以适应各种设备，无论设备的实际性能怎样。基于图片类型以及压缩率，图片在变化时质量会发生变化，但图片文件大小会明显减小。</p>
				<p><a href=
				"https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/compressive">
				查看示例</a></p>
			</div>
		</div>

		<div class="highlight-module highlight-module--remember">
			<div class="highlight-module__container icon-exclamation">
				<div class="highlight-module__content g-wide--pull-1">
					<p class="highlight-module__title">注意</p>

					<ul class="highlight-module__list">
						<li>使用压缩技术时需注意这会耗费更多的内存，以及为解码付出更多成本。改变大尺寸的图片适应小尺寸的屏幕会付出较大代价，特别是在一些内存小，处理器受限的小屏幕设备上。</li>
					</ul>
				</div>
			</div>
		</div>

		<div class="container">
			<div class="content">

				<h4 id="javascript-image-replacement">JavaScript脚本图片替换技术</h4>

				<p>Javascript脚本图片替换技术会检测设备的性能然后“做一些恰当的事情”。你可以通过
				<code>window.devicePixelRatio</code>来判断设备的像素尺寸、宽高值，通过<code>navigator.connection</code>试探一些能用的网络连接，或者模拟一个请求。当这些信息被收集完毕后，你就能决定加载哪张图片了。</p>

				<p>使用Javascript这种处理方式有一个大的缺点就是这意味着在解析器完成解析之前，图片会延迟加载。在页面加载完所有事件之前图片资源不会开始下载。并且，浏览器一般情况下会将1x和2x的图片资源都进行下载，这样导致页面变得臃肿。
				
				<h2 id="avoid-images-completely">完全避免图片</h2>

				<p>有些时候，最佳的图形展示可能压根就不是一张图片。只要有可能，我们建议使用本地浏览器来实现相近的功能或效果。浏览器可以预先加载图片然后进行图形渲染。这表示浏览器不再需要进行单独的图片资源下载并过滤变形的图片。我们可以使用字符编码或者字体图标表现图标。</p>
			</div>
		</div>

		<div class=
		"highlight-module highlight-module--left highlight-module--learning">
			<div class="highlight-module__container icon-star">
				<div class=
				"highlight-module__content g-wide--push-1 g-wide--pull-1 g-medium--push-1">
				<p class="highlight-module__title">关键技术简介</p>

					<ul class="highlight-module__list">
						<li>任何时候尽可能避免使用图片，用浏览器的功能进行代替，在使用图片的地方用字符编码进行替换，使用字体图标替换较复杂的图标。</li>
					</ul>
				</div>
			</div>
		</div>

		<div class="container">
			<div class="content">
				<h3 id="place-text-in-markup-instead-of-embedded-in-images">
				在标识中放置文字，取代嵌入图片</h3>

				<p>网页的任何地方如果是文字，就使用文字而不是嵌入图片，例如在标题中使用图片，将电话号码或者地址之类的联系信息直接放在图片里。这些可以防止他人对这些信息进行复制粘贴加以利用，让信息不会被屏幕阅读器读取，不会响应式变化。作为替换，你可以在你的标记里使用文字，必要时使用网络字体实现你需要的风格。</p>

				<h3 id="use-css-to-replace-images">使用CSS替换图片</h3>

				<p id="noImage">现代浏览器使用CSS特性来创建样式，这将预先需要加载图片。举例来说，复杂的渐变可以运用
				<code>background</code>属性来生成，阴影可以运用
				<code>box-shadow</code>生成，圆角可以运用<code>border-radius</code>属性加到元素上。</p>

				<div class="highlight">
					<pre>
<code class="html"><span class="nt">&lt;style </span><span class=
"na">type=</span><span class="s">&quot;text/css&quot;</span><span class=
"nt">&gt;</span>
  <span class="nt">div</span><span class="nf">#noImage</span> <span class=
"p">{</span>
	<span class="k">color</span><span class="o">:</span> <span class=
"nb">white</span><span class="p">;</span>
	<span class="k">border</span><span class="o">-</span><span class=
"n">radius</span><span class="o">:</span> <span class=
"m">5px</span><span class="p">;</span>
	<span class="n">box</span><span class="o">-</span><span class=
"n">shadow</span><span class="o">:</span> <span class=
"m">5px</span> <span class="m">5px</span> <span class=
"m">4px</span> <span class="m">0</span> <span class="n">rgba</span><span class=
"p">(</span><span class="m">9</span><span class="o">,</span><span class=
"m">130</span><span class="o">,</span><span class="m">154</span><span class=
"o">,</span><span class="m">0</span><span class="o">.</span><span class=
"m">2</span><span class="p">);</span>
	<span class="k">background</span><span class="o">:</span> <span class=
"n">linear</span><span class="o">-</span><span class=
"n">gradient</span><span class="p">(</span><span class=
"n">rgba</span><span class="p">(</span><span class="m">9</span><span class=
"o">,</span> <span class="m">130</span><span class="o">,</span> <span class=
"m">154</span><span class="o">,</span> <span class="m">1</span><span class=
"p">)</span><span class="o">,</span> <span class="n">rgba</span><span class=
"p">(</span><span class="m">9</span><span class="o">,</span> <span class=
"m">130</span><span class="o">,</span> <span class="m">154</span><span class=
"o">,</span> <span class="m">0</span><span class="o">.</span><span class=
"m">5</span><span class="p">));</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code>
</pre>
				</div>

				<p>记住使用这些技术并不需要呈现周期，一种对手机意义非凡的技术。如果用得过了，你会因此损失一些你已取得的效果并妨碍表现性能。</p>

				<h3 id="replace-simple-icons-with-unicode">使用字符编码替换简单的图标</h3>

				<p>许多字体里包含并支持非常多的符号编码，这些可以用来替换图片。不像图片，字符编码能很好地进行缩放，并且不管展示屏多大或多小它们都看起来很不错。</p>

				<p>除了普通字符集，字符码也包含了数字符号(&#8528;)、箭头(&#8592;)、数学运算符(&#8730;)、几何图形(&#9733;)、控制图符(&#9654;)、盲文点字模型(&#10255;)、音乐符号(&#9836;)、希腊字母(&#937;)，甚至国际象棋符号(&#9822;)。</p>

				<p>这种包含编码字符相同方法已经实现，实体命名为：<code>&amp;#XXXX</code>，<code>XXXX</code>
				表示字符编码号。举例说明：</p>

				<div class="highlight">
					<pre>
<code class="html">你是一个超级<span class="ni">&amp;#9733;</span>
</code>
</pre>
				</div>

				<p>你是一个超级巨&#9733;</p>

				<h3 id="replace-complex-icons-with-icon-fonts">使用图标字体代替复杂图标</h3>

				<p>为了适应更多复杂的图标需要，图标字体普遍变得轻量级，在单一的HTTP请求中很易用。图标文字相较于图片来说有许多优势：</p>

				<ul>
					<li>它们是矢量图形可以被无限缩放。</li>

					<li>CSS样式控制颜色、阴影、透明度以及简单动画。</li>

					<li>一整套的图标可以在一个字体里下载。</li>
				</ul>

				<p><a href=
				"https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/icon-font">
				<img alt=
				"Example of a page that uses FontAwesome for it's font icons."
				class="center" src="img/icon-fonts.png"></a></p>
			</div>
		</div>

		<div class=
		"highlight-module highlight-module--code highlight-module--right">
			<div class="highlight-module__container">
				<div class="highlight">
					<pre>

<code class=
"html">用了不起的字符，你可以编码实体进行图标添加，就像这个HTML5的标志(<span class="nt">&lt;span</span> <span class=
"na">class=</span><span class="s">&quot;awesome&quot;</span><span class=
"nt">&gt;</span><span class="ni">&amp;#xf13b;</span><span class=
"nt">&lt;/span&gt;</span>)
	或通过给元素添加诸如CSS3标志 (<span class="nt">&lt;i</span> <span class=
"na">class=</span><span class="s">&quot;fa fa-css3&quot;</span><span class=
"nt">&gt;&lt;/i&gt;</span>)的特殊类<span class=
"ni">&amp;lt;</span>i<span class="ni">&amp;gt;</span>。
	
</code>
</pre>
				</div><a class="highlight-module__cta" href=
				"https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/icon-font">查看完整示例</a>
			</div>
		</div>

		<div class="container">
			<div class="content">
				<p>有成百上千的免费和付费图标字体可用，包括<a href=
				"http://fortawesome.github.io/Font-Awesome/">Font Awesome</a>,
				<a href="http://pictos.cc/">Pictos</a>和<a href=
				"http://glyphicons.com/">Glyphicons</a>.</p>

				<p>一定要保证平衡额外的HTTP请求和图标文件大小的权重。例如，如果你只是需要少量的图标，你最好使用一张图片或者一个图片的子画面。</p>

				<h2 id="optimize-images-for-performance">优化图片表现</h2>

				<p>图片通常占了大多数的下载字节，也常占据了大部分的页面视觉空间。因此，优化图片通常可以为你的页面带来最大的字节存储以及性能改进：浏览器下载更少的字节，更少与其他用户间的带宽竞争，以及更快的浏览器加载并显示所有资源。</p>
			</div>
		</div>

		<div class=
		"highlight-module highlight-module--left highlight-module--learning">
			<div class="highlight-module__container icon-star">
				<div class=
				"highlight-module__content g-wide--push-1 g-wide--pull-1 g-medium--push-1">
				<p class="highlight-module__title">关键技术简介</p>

					<ul class="highlight-module__list">

						<li>不要随便选一种图片格式，了解这些可用的不同格式，然后选择最合适的那种。</li>

						<li>在你的工作流中使用图片优化和压缩工具来减小文件大小。</li>

						<li>在图像集里放置常用图片减少http请求。</li>

						<li>仅仅当图片滚动入页面展示区时考虑加载图片，这样可以加快加载时间并且减少页面负担。</li>
					</ul>
				</div>
			</div>
		</div>

		<div class="container">
			<div class="content">
				<h3 id="choose-the-right-format">选择正确的格式</h3>

				<p>有两种类型的图像可以考虑：<a href=
				"http://en.wikipedia.org/wiki/Vector_graphics">矢量图</a>以及<a href=
				"http://en.wikipedia.org/wiki/Raster_graphics">位图</a>。就位图而言，你也需要选择适当的格式，比如：<code>GIF</code>、
				<code>PNG</code>、 <code>JPG</code>。</p>

				<p><strong>位图</strong>，就像照片或者其他图片，图像由占据网格的一个个像素点构成。代表性的位图，比如来自照相机或者扫描仪，或者可以在浏览器<code>canvas</code>元素中创建。
				图像的尺寸越大，文件大小随之越大。当缩放的比例大于原始尺寸是，位图会因为浏览器需要猜测丢失的像素点儿产生模糊。</p>

				<p><strong>矢量图</strong>，如标志和艺术线条，都由一系列的曲线、直线、形状以及填补色构成。矢量图项目通常由
				Illustrator或者Inkscape创建并且保存为矢量格式比如<a href=
				"http://css-tricks.com/using-svg/"><code>SVG</code></a>。
				因为矢量图由简单的基本元构成，它们可以被无失真的放大并且不改变文件大小。</p>

				<p>当选择合适的格式时，考虑两种图像的原始类型（位图还是矢量图）以及内容（颜色、、动画、文字等）都非常重要。没有哪一种格式能够适用所有的图片类型并且每一种格式都有自己的优缺点。</p>

				<p>选择正确的图片格式，从这些指导开始入手</p>

				<ul>
					<li>对照片类图片采用<code>JPG</code>格式。</li>

					<li>对标志或者线稿这类矢量艺术图以及纯色图形采用<code>SVG</code>格式。如果矢量图格式不支持，尝试一下WebP或者PNG格式。</li>

					<li>使用<code>PNG</code>格式而不是<code>GIF</code>格式因为PNG格式允许更多的颜色并提供更好的压缩率。</li>

					<li>对于较长的动画，考虑使用
					<code>&lt;video&gt;</code>标签以提供更好的图像质量并允许用户控制回放。</li>
				</ul>

				<h3 id="reduce-the-file-size">减少文件大小</h3>

				<p>图片文件大小可以考虑当保存完毕使用“后处理”来减小大小。有很多的工具可以用于压缩图片——失真以及不失真的、线上的、用户界面式的、命令行式的。只要有可能，最好采用图片的自动优化，这样它就能成为你工作流中的一等公民。</p>

				<p>一些工具能对<code>JPG</code>以及<code>PNG</code>格式的文件进一步无失真地压缩，不影响图片质量。对
				<code>JPG</code>格式，使用
				<a href="http://jpegclub.org/">jpegtran</a>或者<a href=
				"http://freshmeat.net/projects/jpegoptim/">jpegoptim</a>
				（仅适用于Linux；运行-strip-all选项）。对<code>PNG</code>格式，使用<a href=
				"http://optipng.sourceforge.net/">OptiPNG</a>或者<a href=
				"http://www.advsys.net/ken/util/pngout.htm">PNGOUT</a>。</p>

				<h3 id="use-image-sprites">使用image sprites技术</h3>

				<p>CSS spriting是将一定数量的图片合并放在一张“sprite sheet”图片里的技术。个人可以通过指明偏移量来使用图片中的正确的那部分。</p>

				<p><a href=
				"https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/image-sprite">
				<img alt="Image sprite sheet used in example" class="center"
				src="img/sprite-sheet.png"></a></p>
			</div>
		</div>

		<div class=
		"highlight-module highlight-module--code highlight-module--right">
			<div class="highlight-module__container">
				<div class="highlight">
					<pre>
<code class="html">    <span class="nc">.sprite-sheet</span> <span class=
"p">{</span>
	  <span class="k">background-image</span><span class=
"o">:</span> <span class="sx">url(sprite-sheet.png)</span><span class=
"p">;</span>
	  <span class="k">width</span><span class="o">:</span> <span class=
"m">40px</span><span class="p">;</span>
	  <span class="k">height</span><span class="o">:</span> <span class=
"m">25px</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="nc">.google-logo</span> <span class="p">{</span>
	  <span class="k">width</span><span class="o">:</span> <span class=
"m">125px</span><span class="p">;</span>
	  <span class="k">height</span><span class="o">:</span> <span class=
"m">45px</span><span class="p">;</span>
	  <span class="k">background-position</span><span class=
"o">:</span> <span class="m">-190px</span> <span class=
"m">-170px</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="nc">.gmail</span> <span class="p">{</span>
	  <span class="k">background-position</span><span class=
"o">:</span> <span class="m">-150px</span> <span class=
"m">-210px</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="nc">.maps</span> <span class="p">{</span>
	  <span class="k">height</span><span class="o">:</span> <span class=
"m">40px</span><span class="p">;</span>
	  <span class="k">background-position</span><span class=
"o">:</span> <span class="m">-120px</span> <span class=
"m">-165px</span><span class="p">;</span>
	<span class="p">}</span>
	
</code>
</pre>
				</div><a class="highlight-module__cta" href=
				"https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/image-sprite">查看完整示例</a>
			</div>
		</div>

		<div class="container">
			<div class="content">

				<p>精灵表的优势是在加载多个图片时，可以减少下载请求数，同时允许缓存。</p>

				<h3 id="consider-lazy-loading">考虑延迟加载</h3>

				<p>延迟加载可以显著加快长页面的加载，仅当必要或者主要内容完成加载渲染时，才加载页面下方包含的图片部分。除了改进性能，使用延迟加载能够创建无限滚动的用户体验。</p>

				<p>创建无限滚动加载的页面时需要小心，因为内容加载后是可见的，搜索引擎或许永远不看内容。除此以外，希望在页脚寻找信息用户可能永远看不到页脚内容，因为一直在被加载新内容。</p>

				<div class="related-items">
					<div class="container">
						<div class="g-wide--push-1 g-medium--push-1">
							<h3 class="related-items--title">相关资讯</h3>

							<ul class="list-links">
								<li class="list__item"><a href=
								"../../performance/optimizing-content-efficiency/optimize-encoding-and-transfer.html#image-optimization">
								图片优化</a></li>

								<li class="list__item"><a href=
								"../../performance/optimizing-content-efficiency/index-2.html">
								图片优化效率</a></li>
							</ul>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="next-lessons container-medium themed--background"
		data-current-lesson="01">
			<h3>接下来的课程</h3>

			<ol class="list-lessons list-links">
				<li class="current" title="Images"><a href="index.html">图片
				</a></li>

				<li title="Video"><a href="../video/index.html">视频</a></li>

				<li title="Audio"><a href="../audio/index.html">音频</a></li>
			</ol>
		</div>
	</div><!-- /.article-container -->

	<div class="container clear">
		<div class="gc-content-license g-wide--3 g-wide--last" id=
		"gc-content-license">
			<p>除非另有说明，此页面内容经<a href=
			"http://creativecommons.org/licenses/by/3.0/">Creative Commons
			Attribution 3.0 License</a>批准，代码经<a href="http://www.apache.org/licenses/LICENSE-2.0">Apache 2.0
			License</a>批准。详细请参阅<a href=
			"https://developers.google.com/site-policies">网站政策</a>.</p>
		</div>
	</div>

	<footer id="gc-footer">
		<div class="container" id="gc-copyright">
			<a href="http://developers.google.com/"><img alt=
			"Google Developers logo" id="developers-logo-footer" src=
			"../../../../../_static/0f4dd8c48e/images/developers-logo-footer.png"></a>

			<ul>
				<li><a href="http://www.google.com/">谷歌</a></li>

				<li><a href="http://developers.google.com/site-terms">服务条款</a></li>

				<li><a href="http://www.google.com/intl/en/privacy/">保密协议</a></li>

				<li><a href=
				"http://developers.google.com/careers">加入谷歌</a></li>
			</ul>
		</div>
	</footer>

	<div class="grid-overlay clear">
		<div class="g-medium--1 g-wide--1"></div>

		<div class="g-medium--1 g-wide--1"></div>

		<div class="g-medium--1 g-medium--last g-wide--1"></div>

		<div class="g-wide--1 g-wide--last"></div>
	</div><script type="text/javascript">
  (function(document) {
		var toggleDocumentationMenu = function() {
		  var navBtn = document.querySelector('.main-nav__btn');
		  var navList = document.querySelector('.main-nav__list');
		  var navIsOpenedClass = 'nav-is-opened';
		  var navListIsOpened = false;

		  navBtn.addEventListener('click', function (event) {
			event.preventDefault();

			if (!navListIsOpened) {
			  addClass(navList, navIsOpenedClass);
			  navListIsOpened = true;
			} else {
			  removeClass(navList, navIsOpenedClass);
			  navListIsOpened = false;
			}
		  });
		}

		var toggleMainNav = function() {
		  var documentationItem =
			  document.querySelector('.main-nav__item--documentation');
		  var documentationLink =
			  document.querySelector('.main-nav__item--documentation > .main-nav__link');
		  var documentationIsOpenedClass = 'subnav-is-opened';
		  var documentationIsOpened = false;

		  documentationLink.addEventListener('click', function (event) {
			event.preventDefault();

			if (!documentationIsOpened) {
			  documentationIsOpened = true;
			  addClass(documentationItem, documentationIsOpenedClass);
			} else {
			  documentationIsOpened = false;
			  removeClass(documentationItem, documentationIsOpenedClass);
			}

		  });
		}

		var isTouch = function() {
		  return ('ontouchstart' in window) ||
			window.DocumentTouch && document instanceof DocumentTouch;
		};

		var addClass = function (element, className) {
		  if (!element) { return; }
		  element.className = element.className.replace(/\s+$/gi, '') + ' ' + className;
		}

		var removeClass = function(element, className) {
		  if (!element) { return; }
		  element.className = element.className.replace(className, '');
		}

		var html = document.querySelector('html');
		removeClass(html, 'no-js');
		addClass(html, 'js');

		if (isTouch()) {
		  removeClass(html, 'no-touch');
		  addClass(html, 'is-touch');
		}

		toggleDocumentationMenu();
		toggleMainNav();
	  })(document);
	</script><script>
(function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=
	function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;
	e=o.createElement(i);r=o.getElementsByTagName(i)[0];
	e.src='../../../../../../www.google-analytics.com/analytics.js';
	r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));
	ga('create','UA-24532603-1');ga('send','pageview');
	</script>
	<!-- Mirrored from developers.google.com/web/fundamentals/documentation/introduction-to-media/images/index by HTTrack Website Copier/3.x [XR&CO'2013], Wed, 07 May 2014 09:54:23 GMT -->
</body>
</html>
=======
<html>
  
<!-- Mirrored from developers.google.com/web/fundamentals/documentation/introduction-to-media/images/ by HTTrack Website Copier/3.x [XR&CO'2013], Wed, 07 May 2014 09:56:14 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head>
    <meta charset="utf-8" />
    <!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
<title>Images — Google Web Fundamentals</title><meta name="author" content=""><meta name="description" content=""><link rel="icon" href="../../../favicon.ico"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta id="viewport" name="viewport" content="width=device-width, initial-scale=1"><meta property="twitter:account_id" content="@chromium_dev"><link rel="publisher" href="https://plus.google.com/+PeteLePage"><meta itemprop="name" content="Images — Google Web Fundamentals"><meta itemprop="image" content="../../../../../imgs/lono.html"><meta itemprop="description" content="A picture is worth 1000 words, and images play an integral part of every page. But they also often account for most of the downloaded bytes.  With Responsive web design not only can our layouts change based on device characteristics, but images as well."><link rel="stylesheet" media="screen" href="../../../css/styles.min.css"><body class="page--article article--introduction-to-media theme--introduction-to-media"><header id="gc-googlebar"><div class="container"><a id="gc-logo" href="http://developers.google.com/"><img src="http://developers.google.com/_static/0f4dd8c48e/images/developers-logo.svg" alt="Google"></a><p id="beta" class="beta"><i class="icon icon-cog"></i>This site is still a work in progress!<br><a href="https://github.com/Google/WebFundamentals/issues/new?title=Issue%20in:%20/documentation/introduction-to-media/images/index.html" target="_blank" target="_blank">Report an issue</a> or <a href="https://github.com/Google/WebFundamentals" target="_blank" target="_blank">view source</a>.</p></div></header><header class="main-header"><h1 class="main-header__title"><a href="https://developers.google.com/web/fundamentals" title="Web Essentials" title="Go to Web Fundamentals" class="main-header__logo">Web Fundamentals</a></h1><nav class="main-nav"><ul class="main-nav__list clear"><li class="main-nav__item main-nav__item--web-fundamentals main-nav__item--home"><a class="main-nav__link" href="../../../index.html" title="Go to Web Fundamentals">Web Fundamentals <i class="main-nav__icon icon icon-chevron-right"></i></a></li><li class="main-nav__item main-nav__item--getting-started"><a class="main-nav__link" href="../../../getting-started/your-first-multi-screen-site/index.html" title="Go to Getting Started">Getting Started <i class="main-nav__icon icon icon-chevron-right"></i></a></li><li class="main-nav__item main-nav__item--documentation"><a class="main-nav__link" href="../../index.html" title="Go to Documentation">Documentation <i class="main-nav__icon icon icon-custom"></i></a><div class="main-nav__secondary-nav"><div class="main-nav__secondary-content"><div class="main-nav__link--explore-wrapper"><a href="../../index.html" title="Explore The Documentation" class="main-nav__link main-nav__link--child main-nav__link--explore">Explore The Documentation <i class="main-nav__icon icon icon-chevron-right"></i></a></div><div class="clear"><ul class="main-nav__list--child g-medium--2 g-wide--2"><li class="main-nav__item--child nav-theme--multi-device-layouts"><a class="main-nav__link main-nav__link--child themed--hover" title="Go to Multi-Device Layouts" href="../../multi-device-layouts/index.html"><span class="main-nav__guide-icon icon-circle--nav themed--background"><i class="icon icon-multi-device-layouts"></i></span> Multi-Device Layouts <i class="main-nav__icon icon icon-chevron-right"></i></a></li><li class="main-nav__item--child nav-theme--user-input"><a class="main-nav__link main-nav__link--child themed--hover" title="Go to Forms and User Input" href="../../user-input/index.html"><span class="main-nav__guide-icon icon-circle--nav themed--background"><i class="icon icon-user-input"></i></span> Forms and User Input <i class="main-nav__icon icon icon-chevron-right"></i></a></li><li class="main-nav__item--child nav-theme--introduction-to-media"><a class="main-nav__link main-nav__link--child themed--hover" title="Go to Images, Video and Audio" href="../index.html"><span class="main-nav__guide-icon icon-circle--nav themed--background"><i class="icon icon-introduction-to-media"></i></span> Images, Video and Audio <i class="main-nav__icon icon icon-chevron-right"></i></a></li><li class="main-nav__item--child nav-theme--performance"><a class="main-nav__link main-nav__link--child themed--hover" title="Go to Performance" href="../../performance/index.html"><span class="main-nav__guide-icon icon-circle--nav themed--background"><i class="icon icon-performance"></i></span> Performance <i class="main-nav__icon icon icon-chevron-right"></i></a></li></ul></div></div></div></li><li class="main-nav__item main-nav__item--resources"><a class="main-nav__link" href="../../../resources/index.html" title="Go to Resources">Resources <i class="main-nav__icon icon icon-chevron-right"></i></a></li></ul><button class="main-nav__btn btn--toggle-nav"><i class="icon icon-menu"></i></button></nav></header><div class="article-container"><div class="editorial-header"><div class="container"><div class="content"><nav class="breadcrumbs"><p><a href="../../index-2.html" title="Documentation">Documentation</a> / <a href="../index-2.html" title="Images, Audio and Video">Images, Audio and Video</a> /</p></nav><h1 class="tag editorial-header__title">Images, Audio and Video</h1><h2 class="editorial-header__subtitle">Images</h2><p class="editorial-header__excerpt">A picture is worth 1000 words, and images play an integral part of every page. But they also often account for most of the downloaded bytes. With responsive web design not only can our layouts change based on device characteristics, but images as well.</p></div></div></div><div class="container"><div class="content"><style type="text/css">img, video, object {
    max-width: 100%;
  }

  img.center {
    display: block;
    margin-left: auto;
    margin-right: auto;
  }</style><div class="toc"><h3 class="toc__title">In this lesson</h3><ol class="toc__list list-anchor" id="toc"><li><a href="#images-in-css">Images in CSS</a></li><li><a href="#images-in-markup">Images in markup</a></li><li><a href="#avoid-images-completely">Avoid images completely</a></li><li><a href="#optimize-images-for-performance">Optimize images for performance</a></li></ol></div><h3 id="responsive-images">Responsive images</h3><p>Responsive web design means that not only can our layouts change based on device characteristics, but content as well. For example, on high resolution (2x) displays, high resolution graphics are needed to ensure sharpness. An image that is 50% width may work just fine when the browser is 800px wide, but will use too much real estate on a narrow phone, and still comes at the same bandwidth overhead when scaled down to fit on a smaller screen.</p><h3 id="art-direction">Art direction</h3><p><img class="center" src="img/art-direction.png" alt="Art direction example" srcset="img/art-direction.png 1x, img/art-direction-2x.png 2x"></p><p>Other times the image may need to be changed more drastically: changing the proportions, cropping and even replacing the entire image. In this case, changing the image is usually referred to as art direction. See <a href="http://responsiveimages.org/demos/">responsiveimages.org/demos/</a> for more examples.</p></div></div><div class="highlight-module highlight-module--left highlight-module--learning"><div class="highlight-module__container icon-star"><div class="highlight-module__content g-wide--push-1 g-wide--pull-1 g-medium--push-1"><p class="highlight-module__title">Key Takeaways</p><ul class="highlight-module__list"><li>Use the best image for the characteristics of the display, consider screen size, device resolution and page layout.</li><li>Change the <code>background-image</code> property in CSS for high DPI displays using media queries with <code>min-resolution</code> and <code>-webkit-min-device-pixel-ratio</code>.</li><li>Use srcset to provide high resolution images in addition to the 1x image in markup.</li><li>Consider the performance costs when using JavaScript image replacement techniques or when serving highly compressed high resolution images to lower resolution devices.</li></ul></div></div></div><div class="container"><div class="content"><h2 id="images-in-css">Images in CSS</h2><p>The CSS <code>background</code> property is a powerful tool for adding complex images to elements, making it easy to add multiple images, cause them to repeat, and more. When combined with media queries, the background property becomes even more powerful, enabling conditional image loading based on screen resolution, viewport size and more.</p><h3 id="use-media-queries-for-conditional-image-loading-or-art-direction">Use media queries for conditional image loading or art direction</h3><p>Media queries not only affect the page layout, but can also be used to conditionally load images or to provide art direction depending on the viewport width.</p><p>For example in the sample below, on smaller screens, only <code>small.png</code> is downloaded and applied to the content <code>div</code>, while on larger screens, <code>background-image: url(body.png)</code> is applied to the body and <code>background-image: url(large.png)</code> is applied to the content <code>div</code>.</p></div></div><div class="highlight-module highlight-module--code highlight-module--right"><div class="highlight-module__container"><code class="html"><div class="highlight"><pre>    <span class="nc">.example</span> <span class="p">{</span>
      <span class="k">height</span><span class="o">:</span> <span class="m">400px</span><span class="p">;</span>
      <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(small.png)</span><span class="p">;</span>
      <span class="k">background-repeat</span><span class="o">:</span> <span class="k">no-repeat</span><span class="p">;</span>
      <span class="k">background</span><span class="o">-</span><span class="k">size</span><span class="o">:</span> <span class="n">contain</span><span class="p">;</span>
      <span class="k">background-position</span><span class="o">-</span><span class="n">x</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">@media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">500px</span><span class="o">)</span> <span class="p">{</span>
      <span class="nt">body</span> <span class="p">{</span>
        <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(body.png)</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nc">.example</span> <span class="p">{</span>
        <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(large.png)</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
</pre></div></code> <a class="highlight-module__cta" href="https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/conditional-mq">View full sample</a></div></div><div class="container"><div class="content"><h3 id="use-image-set-to-provide-high-res-images">Use image-set to provide high res images</h3><p>The <code>image-set()</code> function in CSS enhances the behavior <code>background</code> property, making it easy to provide multiple image files for different device characteristics. This allows the browser to choose the best image depending on the characteristics of the device, for example using a 2x image on a 2x display, or a 1x image on a 2x device when on a limited bandwidth network.</p><div class="highlight"><pre><code class="css"><span class="nt">background-image</span><span class="o">:</span> <span class="nt">image-set</span><span class="o">(</span>
  <span class="nt">url</span><span class="o">(</span><span class="nt">icon1x</span><span class="nc">.jpg</span><span class="o">)</span> <span class="nt">1x</span><span class="o">,</span>
  <span class="nt">url</span><span class="o">(</span><span class="nt">icon2x</span><span class="nc">.jpg</span><span class="o">)</span> <span class="nt">2x</span>
<span class="o">);</span>
</code></pre></div><p>In addition to loading the correct image, the browser will also scale it accordingly. In other words, the browser assumes that 2x images are twice as large as 1x images, and so will scale the 2x image down by a factor of 2, so that the image appears to be the same size on the page.</p><p>Support for <code>image-set()</code> is still new and is only supported in Chrome and Safari with the <code>-webkit</code> vendor prefix. Care must also be taken to include a fallback image for when <code>image-set()</code> is not supported, for example:</p></div></div><div class="highlight-module highlight-module--code highlight-module--right"><div class="highlight-module__container"><code class="html"><div class="highlight"><pre>    <span class="nc">.sample</span> <span class="p">{</span>
      <span class="k">width</span><span class="o">:</span> <span class="m">128px</span><span class="p">;</span>
      <span class="k">height</span><span class="o">:</span> <span class="m">128px</span><span class="p">;</span>
      <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(icon1x.png)</span><span class="p">;</span>
      <span class="k">background-image</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">image</span><span class="o">-</span><span class="n">set</span><span class="p">(</span>
        <span class="sx">url(icon1x.png)</span> <span class="m">1</span><span class="n">x</span><span class="o">,</span>
        <span class="sx">url(icon2x.png)</span> <span class="m">2</span><span class="n">x</span>
      <span class="p">);</span>
      <span class="k">background-image</span><span class="o">:</span> <span class="n">image</span><span class="o">-</span><span class="n">set</span><span class="p">(</span>
        <span class="sx">url(icon1x.png)</span> <span class="m">1</span><span class="n">x</span><span class="o">,</span>
        <span class="sx">url(icon2x.png)</span> <span class="m">2</span><span class="n">x</span>
      <span class="p">);</span>
    <span class="p">}</span>
    
</pre></div></code> <a class="highlight-module__cta" href="https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/image-set">View full sample</a></div></div><div class="container"><div class="content"><p>The above will load the appropriate asset in browsers that support image-set, and fall back to the 1x asset otherwise. The obvious caveat is that while <code>image-set()</code> browser support is low, most browsers will get the 1x asset.</p><h3 id="use-media-queries-to-provide-high-res-images-or-art-direction">Use media queries to provide high res images or art direction</h3><p>Media queries can create rules based on the <a href="http://www.html5rocks.com/en/mobile/high-dpi/#toc-bg">device pixel ratio</a>, making it possible to specify different images for 2x vs 1x displays.</p><div class="highlight"><pre><code class="css"><span class="k">@media</span> <span class="o">(</span><span class="nt">min-resolution</span><span class="o">:</span> <span class="nt">2dppx</span><span class="o">),</span>
<span class="o">(</span><span class="nt">-webkit-min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">2</span><span class="o">)</span>
<span class="p">{</span>
  <span class="c">/* High dpi styles &amp; resources here */</span>
<span class="p">}</span>
</code></pre></div><p>Chrome, Firefox and Opera all support the standard <code>(min-resolution: 2dppx)</code>, while Safari and Android Browser both require the older vendor prefixed syntax without the <code>dppx</code> unit. Remember, these styles are only loaded if the device matches the media query, and you must specify styles for the base case. This also provides the benefit of ensuring something will be rendered if the browser doesn&#8217;t support resolution specific media queries.</p></div></div><div class="highlight-module highlight-module--code highlight-module--right"><div class="highlight-module__container"><code class="html"><div class="highlight"><pre>    <span class="nc">.sample</span> <span class="p">{</span>
      <span class="k">width</span><span class="o">:</span> <span class="m">128px</span><span class="p">;</span>
      <span class="k">height</span><span class="o">:</span> <span class="m">128px</span><span class="p">;</span>
      <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(icon1x.png)</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">@media</span> <span class="o">(</span><span class="nt">min-resolution</span><span class="o">:</span> <span class="nt">2dppx</span><span class="o">),</span> <span class="c">/* Standard syntax */</span>
    <span class="o">(</span><span class="nt">-webkit-min-device-pixel-ratio</span><span class="o">:</span> <span class="nt">2</span><span class="o">)</span>  <span class="c">/* Safari &amp; Android Browser */</span>
    <span class="p">{</span>
      <span class="nc">.sample</span> <span class="p">{</span>
        <span class="k">background</span><span class="o">-</span><span class="k">size</span><span class="o">:</span> <span class="n">contain</span><span class="p">;</span>
        <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(icon2x.png)</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
</pre></div></code> <a class="highlight-module__cta" href="https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/media-query-dppx">View full sample</a></div></div><div class="container"><div class="content"><p>You can also use the min-width syntax to display alternative images depending on the viewport size. This technique has the advantage that the image is not downloaded if media query doesn&#8217;t match. For example, <code>bg.png</code> is only downloaded and applied to the <code>body</code> if the browser width is 500px or greater:</p><div class="highlight"><pre><code class="css"><span class="k">@media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">500px</span><span class="o">)</span> <span class="p">{</span>
  <span class="nt">body</span> <span class="p">{</span>
    <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(bg.png)</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="images-in-markup">Images in markup</h2><p>The <code>img</code> element is powerful – it downloads, decodes and renders content – and modern browsers support a range of image formats. Including images that work across devices is no different than for desktop, and only requires a few minor tweaks to create a good experience.</p><p>Remember to use relative units when specifying widths for images to prevent them from accidentally overflowing the viewport. For example, <code>width: 50%;</code>, will cause the image width to be 50% of the containing element (not the viewport or actual pixel size).</p><p>Because CSS allows content to overflow it&#8217;s container, it may be necessary use max-width: 100% to prevent images and other content from overflowing. For example:</p><div class="highlight"><pre><code class="css"><span class="nt">img</span><span class="o">,</span> <span class="nt">embed</span><span class="o">,</span> <span class="nt">object</span><span class="o">,</span> <span class="nt">video</span> <span class="p">{</span>
  <span class="k">max-width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>Be sure to provide meaningful descriptions via the <code>alt</code> attribute on <code>img</code> elements; these help make your site more accessible by providing context to screen readers and other assistive technologies.</p><h3 id="enhance-imgs-with-srcset-for-high-dpi-devices">Enhance <code>img</code>&#8217;s with <code>srcset</code> for high DPI devices</h3><p>The <code>srcset</code> attribute enhances the behavior of the <code>img</code> element, making it easy to provide multiple image files for different device characteristics. In the same way that the <a href="#use-image-set-to-provide-high-res-images"><code>image-set</code> CSS function</a> works, <code>srcset</code> allows the browser to choose the best image depending on the characteristics of the device, for example using a 2x image on a 2x display, or a 1x image on a 2x device when on a limited bandwidth network.</p><div class="highlight"><pre><code class="html"><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;photo.png&quot;</span> <span class="na">srcset=</span><span class="s">&quot;photo@2x.png 2x&quot;</span> <span class="err">...</span> <span class="nt">/&gt;</span>
</code></pre></div><p>On browsers that don&#8217;t support <code>srcset</code>, the browser simply uses the default image file specified by the <code>src</code> attribute. This is why it is important to always include a 1x image that can be displayed on any device, regardless of capabilities. When <code>srcset</code> is supported, the comma-separated list of image/conditions is parsed and only the most appropriate image is downloaded and displayed.</p><p>While the conditions can include everything from pixel density to viewport width to viewport height, only pixel density is well supported today. To balance current behavior with future features, stick with simply providing the 2x image in the attribute.</p><h3 id="other-image-techniques">Other image techniques</h3><h4 id="compressive-images">Compressive images</h4><p>The <a href="http://www.html5rocks.com/en/mobile/high-dpi/#toc-tech-overview">compressive image technique</a> serves a highly compressed 2x image to all devices, no matter the actual capabilities of the device. Depending on the type of image and level of compression, image quality may not appear to change, but the file size drops significantly.</p><p><a href="https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/compressive">See example</a></p></div></div><div class="highlight-module highlight-module--remember"><div class="highlight-module__container icon-exclamation"><div class="highlight-module__content g-wide--pull-1"><p class="highlight-module__title">Important</p><ul class="highlight-module__list"><li>Use caution with the compressive technique because of the increased memory and decoding costs it requires. Resizing large images to fit on smaller screens is expensive and can be particularly painful on low-end devices where both memory and processing is limited.</li></ul></div></div></div><div class="container"><div class="content"><h4 id="javascript-image-replacement">JavaScript image replacement</h4><p>JavaScript image replacement checks the capabilities of the device and &#8220;does the right thing&#8221;. You can determine device pixel ratio via <code>window.devicePixelRatio</code>, get screen width and height, and even potentially do some network connection sniffing via <code>navigator.connection</code> or issuing a fake request. Once you&#8217;ve collected all of this information, you can decide which image to load.</p><p>One big drawback to this approach is that using JavaScript means that you will delay image loading until at least the look-ahead parser has finished. This means that images won&#8217;t even start downloading until after the <code>pageload</code> event fires. In addition, the browser will most likely download both the 1x and 2x images, resulting in increased page weight.</p><h2 id="avoid-images-completely">Avoid images completely</h2><p>Sometimes, the best image isn&#8217;t actually an image at all. Whenever possible, use the native capabilities of the browser to provide the same or similar functionality. Browsers generate visuals that would have previously required images. This means that browsers no longer need to download separate image files and prevents awkwardly scaled images. Icons can be rendered using unicode or special icon fonts.</p></div></div><div class="highlight-module highlight-module--left highlight-module--learning"><div class="highlight-module__container icon-star"><div class="highlight-module__content g-wide--push-1 g-wide--pull-1 g-medium--push-1"><p class="highlight-module__title">Key Takeaways</p><ul class="highlight-module__list"><li>Avoid images whenever possible, instead, leverage browser capabilities, use unicode characters in place of images, and replace complex icons with icon fonts.</li></ul></div></div></div><div class="container"><div class="content"><h3 id="place-text-in-markup-instead-of-embedded-in-images">Place text in markup, instead of embedded in images</h3><p>Wherever possible, text should be text, and not embedded into images, for example using images for headlines, or placing contact information like phone numbers or addresses directly into images. This prevents people from being able to copy and paste the information, makes it inaccessible for screen readers, and isn&#8217;t responsive. Instead, place the text in your markup and if necessary use webfonts to achieve the style you need.</p><h3 id="use-css-to-replace-images">Use CSS to replace images</h3><style type="text/css">p#noImage {
    margin-top: 2em;
    padding: 1em;
    padding-bottom: 2em;
    color: white;
    border-radius: 5px;
    box-shadow: 5px 5px 4px 0 rgba(9,130,154,0.2);
    background: linear-gradient(rgba(9, 130, 154, 1), rgba(9, 130, 154, 0.5));
  }</style><p id="noImage">Modern browsers can use CSS features to create styles that would previously required images. For examples, complex gradients can be created using the <code>background</code> property, shadows can be created using <code>box-shadow</code> and rounded corners can be added with the <code>border-radius</code> property.</p><div class="highlight"><pre><code class="html"><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
  <span class="nt">div</span><span class="nf">#noImage</span> <span class="p">{</span>
    <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
    <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
    <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">5px</span> <span class="m">5px</span> <span class="m">4px</span> <span class="m">0</span> <span class="n">rgba</span><span class="p">(</span><span class="m">9</span><span class="o">,</span><span class="m">130</span><span class="o">,</span><span class="m">154</span><span class="o">,</span><span class="m">0</span><span class="o">.</span><span class="m">2</span><span class="p">);</span>
    <span class="k">background</span><span class="o">:</span> <span class="n">linear</span><span class="o">-</span><span class="n">gradient</span><span class="p">(</span><span class="n">rgba</span><span class="p">(</span><span class="m">9</span><span class="o">,</span> <span class="m">130</span><span class="o">,</span> <span class="m">154</span><span class="o">,</span> <span class="m">1</span><span class="p">)</span><span class="o">,</span> <span class="n">rgba</span><span class="p">(</span><span class="m">9</span><span class="o">,</span> <span class="m">130</span><span class="o">,</span> <span class="m">154</span><span class="o">,</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="p">));</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div><p>Keep in mind that using these techniques does require rendering cycles, which can be significant on mobile. If over-used, you&#8217;ll lose any benefit you may have gained and may hinder performance.</p><h3 id="replace-simple-icons-with-unicode">Replace simple icons with unicode</h3><p>Many fonts include support for the myriad of unicode glyphs, which can be used instead of images. Unlike images, unicode fonts scale well, and look good no matter matter how small or large they appear on screen.</p><p>Beyond the normal character set, unicode may include symbols for number forms (&#8528;), arrows (&#8592;), math operators (&#8730;), geometric shapes (&#9733;), control pictures (&#9654;), braille patterns (&#10255;), music notation (&#9836;), Greek letters (&#937;), even chess pieces (&#9822;).</p><p>Including a unicode character is done in the same way named entities are: <code>&amp;#XXXX</code>, where <code>XXXX</code> represents the unicode character number. For example:</p><div class="highlight"><pre><code class="html">You&#39;re a super <span class="ni">&amp;#9733;</span>
</code></pre></div><p>You&#8217;re a super &#9733;</p><h3 id="replace-complex-icons-with-icon-fonts">Replace complex icons with icon fonts</h3><p>For more complex icon requirements, icon fonts are generally lightweight, easy to use and can be served in a single HTTP request. Icon fonts have a number of advantages to images:</p><ul><li>They&#8217;re vector graphics that can be infinitely scaled.</li><li>CSS effects such as color, shadowing, transparency and animations are straightforward.</li><li>An entire set of icons can be downloaded in one font.</li></ul><p><a href="https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/icon-font"><img src="img/icon-fonts.png" class="center" srcset="img/icon-fonts.png 1x, img/icon-fonts-2x.png 2x" alt="Example of a page that uses FontAwesome for it's font icons."></a></p></div></div><div class="highlight-module highlight-module--code highlight-module--right"><div class="highlight-module__container"><code class="html"><div class="highlight"><pre>    With Font Awesome, you can either add icons by using a unicode
    entity, like this HTML5 logo (<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;awesome&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;#xf13b;</span><span class="nt">&lt;/span&gt;</span>)
    or by adding special classes to an <span class="ni">&amp;lt;</span>i<span class="ni">&amp;gt;</span> element like the CSS3
    logo (<span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">&quot;fa fa-css3&quot;</span><span class="nt">&gt;&lt;/i&gt;</span>).
    
</pre></div></code> <a class="highlight-module__cta" href="https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/icon-font">View full sample</a></div></div><div class="container"><div class="content"><p>There are hundreds of free and paid icon fonts available including <a href="http://fortawesome.github.io/Font-Awesome/">Font Awesome</a>, <a href="http://pictos.cc/">Pictos</a> and <a href="http://glyphicons.com/">Glyphicons</a>.</p><p>Be sure to balance the weight of the additional HTTP request and file size with the need for the icons. For example, if you only need a handful of icons, it may be better to use an image or an image sprite.</p><h2 id="optimize-images-for-performance">Optimize images for performance</h2><p>Images often account for most of the downloaded bytes and also often occupy a significant amount of the visual space on the page. As a result, optimizing images can often yield some of the largest byte savings and performance improvements for your website: the fewer bytes the browser has to download, the less competition there is for client&#8217;s bandwidth and the faster the browser can download and display all the assets.</p></div></div><div class="highlight-module highlight-module--left highlight-module--learning"><div class="highlight-module__container icon-star"><div class="highlight-module__content g-wide--push-1 g-wide--pull-1 g-medium--push-1"><p class="highlight-module__title">Key Takeaways</p><ul class="highlight-module__list"><li>Don't just randomly choose an image format, understand the different formats available, and use the format best suited.</li><li>Include image optimization and compression tools into your workflow to reduce file sizes.</li><li>Reduce the number of http requests by placing frequently used images into image sprites.</li><li>Consider loading images only after they’ve scrolled into view to improve the initial page load time and reduce the initial page weight.</li></ul></div></div></div><div class="container"><div class="content"><h3 id="choose-the-right-format">Choose the right format</h3><p>There are two types of images to consider: <a href="http://en.wikipedia.org/wiki/Vector_graphics">vector images</a> and <a href="http://en.wikipedia.org/wiki/Raster_graphics">raster images</a>. For raster images, you also need to choose the right compression format, for example: <code>GIF</code>, <code>PNG</code>, <code>JPG</code>.</p><p><strong>Raster images</strong>, like photographs and other images which are represented as a grid of individual dots or pixels. Raster images typically come from a camera or scanner, or can be created in the browser with the <code>canvas</code> element. As the image size gets larger, the file size grows as well. When scaled larger than their original size, raster images get blurry as the browser needs to guess how to fill in the missing pixels.</p><p><strong>Vector images</strong>, such as logos and line art are be defined by a set of curves, lines, shapes and fill colors. Vector images are created with programs like Adobe Illustrator or Inkscape and saved to a vector format like <a href="http://css-tricks.com/using-svg/"><code>SVG</code></a>. Because vector images are built on simple primitives, they can be scaled without any loss in quality without a change in file size.</p><p>When choosing the right format, it is important to consider both the origin of the image (raster or vector), and the content (colors, animation, text, etc). No one format will fit all image types and each has it&#8217;s own strengths and weaknesses.</p><p>Start with these guidelines when choosing the right format:</p><ul><li>Use <code>JPG</code> for photographic images.</li><li>Use <code>SVG</code> for vector art and solid color graphics such as logos and line art. If vector art is unavailable, try WebP or PNG.</li><li>Use <code>PNG</code> rather than <code>GIF</code> as it allows for more colors and offers better compression ratios.</li><li>For longer animations, consider using <code>&lt;video&gt;</code> which provide better image quality and gives the user control over playback.</li></ul><h3 id="reduce-the-file-size">Reduce the file size</h3><p>Image file size can be considerably reduced by &#8216;post-processing&#8217; them after saving. There are a number of tools for image compression – lossy and lossless, online, GUI, command line. Where possible, it&#8217;s best to try automating image optimization so that it&#8217;s a first-class citizen in your workflow.</p><p>Several tools are available that perform further, lossless compression on <code>JPG</code> and <code>PNG</code> files, with no effect on image quality. For <code>JPG</code>, try <a href="http://jpegclub.org/">jpegtran</a> or <a href="http://freshmeat.net/projects/jpegoptim/">jpegoptim</a> (available on Linux only; run with the &#8211;strip-all option). For <code>PNG</code>, try <a href="http://optipng.sourceforge.net/">OptiPNG</a> or <a href="http://www.advsys.net/ken/util/pngout.htm">PNGOUT</a>.</p><h3 id="use-image-sprites">Use image sprites</h3><p>CSS spriting is a technique whereby a number of images are combined in a single &#8216;sprite sheet&#8217; image. Individual images can then be used by specifying the background image for an element (the sprite sheet) plus an offset to display the correct part.</p><p><a href="https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/image-sprite"><img src="img/sprite-sheet.png" class="center" alt="Image sprite sheet used in example"></a></p></div></div><div class="highlight-module highlight-module--code highlight-module--right"><div class="highlight-module__container"><code class="html"><div class="highlight"><pre>    <span class="nc">.sprite-sheet</span> <span class="p">{</span>
      <span class="k">background-image</span><span class="o">:</span> <span class="sx">url(sprite-sheet.png)</span><span class="p">;</span>
      <span class="k">width</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
      <span class="k">height</span><span class="o">:</span> <span class="m">25px</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nc">.google-logo</span> <span class="p">{</span>
      <span class="k">width</span><span class="o">:</span> <span class="m">125px</span><span class="p">;</span>
      <span class="k">height</span><span class="o">:</span> <span class="m">45px</span><span class="p">;</span>
      <span class="k">background-position</span><span class="o">:</span> <span class="m">-190px</span> <span class="m">-170px</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nc">.gmail</span> <span class="p">{</span>
      <span class="k">background-position</span><span class="o">:</span> <span class="m">-150px</span> <span class="m">-210px</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nc">.maps</span> <span class="p">{</span>
      <span class="k">height</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
      <span class="k">background-position</span><span class="o">:</span> <span class="m">-120px</span> <span class="m">-165px</span><span class="p">;</span>
    <span class="p">}</span>
    
</pre></div></code> <a class="highlight-module__cta" href="https://google-developers.appspot.com/web/fundamentals/resources/samples/documentation/introduction-to-media/images/image-sprite">View full sample</a></div></div><div class="container"><div class="content"><p>Spriting has the advantage of reducing the number of downloads required to get multiple images, while still enabling caching.</p><h3 id="consider-lazy-loading">Consider lazy loading</h3><p>Lazy loading can significantly speed up loading on long pages that include many images below the fold by loading them either as needed or once the primary content has finished loading and rendering. In addition to performance improvements, using lazy loading can create infinite scrolling experiences.</p><p>Be careful when creating infinite scrolling pages, because content is loaded as it becomes visible, search engines may never see that content. In addition, users who are looking for information they expect to see in the footer will never see the footer because new content is always loaded.</p><div class="related-items"><div class="container"><div class="g-wide--push-1 g-medium--push-1"><h3 class="related-items--title">Related information</h3><ul class="list-links"><li class="list__item"><a href="../../performance/optimizing-content-efficiency/optimize-encoding-and-transfer.html#image-optimization">Image optimization</a></li><li class="list__item"><a href="../../performance/optimizing-content-efficiency/index-2.html">Optimizing content efficiency</a></li></ul></div></div></div></div></div><div class="next-lessons container-medium themed--background" data-current-lesson="01"><h3><i class="icon icon-lessons"></i> Next Lessons</h3><ol class="list-lessons list-links"><li class="current" title="Images"><a href="index.html">Images <i class="icon icon-tick"></i></a></li><li title="Video"><a href="../video/index.html">Video</a></li><li title="Audio"><a href="../audio/index.html">Audio</a></li></ol></div></div><!-- /.article-container --><div class="container clear"><div id="gc-content-license" class="gc-content-license g-wide--3 g-wide--last"><p>Except as otherwise noted, the content of this page is licensed under the <a href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 License</a>, and code samples are licensed under the <a href="http://www.apache.org/licenses/LICENSE-2.0">Apache 2.0 License</a>. For details, see our <a href="https://developers.google.com/site-policies">Site Policies</a>.</p></div></div><footer id="gc-footer"><div id="gc-copyright" class="container"><a href="http://developers.google.com/"><img id="developers-logo-footer" src="../../../../../_static/0f4dd8c48e/images/developers-logo-footer.png" alt="Google Developers logo"></a><ul><li><a href="http://www.google.com/">Google</a></li><li><a href="http://developers.google.com/site-terms">Terms of Service</a></li><li><a href="http://www.google.com/intl/en/privacy/">Privacy Policy</a></li><li><a href="http://developers.google.com/careers">Careers</a></li></ul></div></footer><div class="grid-overlay clear"><div class="g-medium--1 g-wide--1"></div><div class="g-medium--1 g-wide--1"></div><div class="g-medium--1 g-medium--last g-wide--1"></div><div class="g-wide--1 g-wide--last"></div></div>
    <script type="text/javascript">
      (function(document) {
        var toggleDocumentationMenu = function() {
          var navBtn = document.querySelector('.main-nav__btn');
          var navList = document.querySelector('.main-nav__list');
          var navIsOpenedClass = 'nav-is-opened';
          var navListIsOpened = false;

          navBtn.addEventListener('click', function (event) {
            event.preventDefault();

            if (!navListIsOpened) {
              addClass(navList, navIsOpenedClass);
              navListIsOpened = true;
            } else {
              removeClass(navList, navIsOpenedClass);
              navListIsOpened = false;
            }
          });
        }

        var toggleMainNav = function() {
          var documentationItem =
              document.querySelector('.main-nav__item--documentation');
          var documentationLink =
              document.querySelector('.main-nav__item--documentation > .main-nav__link');
          var documentationIsOpenedClass = 'subnav-is-opened';
          var documentationIsOpened = false;

          documentationLink.addEventListener('click', function (event) {
            event.preventDefault();

            if (!documentationIsOpened) {
              documentationIsOpened = true;
              addClass(documentationItem, documentationIsOpenedClass);
            } else {
              documentationIsOpened = false;
              removeClass(documentationItem, documentationIsOpenedClass);
            }

          });
        }

        var isTouch = function() {
          return ('ontouchstart' in window) ||
            window.DocumentTouch && document instanceof DocumentTouch;
        };

        var addClass = function (element, className) {
          if (!element) { return; }
          element.className = element.className.replace(/\s+$/gi, '') + ' ' + className;
        }

        var removeClass = function(element, className) {
          if (!element) { return; }
          element.className = element.className.replace(className, '');
        }

        var html = document.querySelector('html');
        removeClass(html, 'no-js');
        addClass(html, 'js');

        if (isTouch()) {
          removeClass(html, 'no-touch');
          addClass(html, 'is-touch');
        }

        toggleDocumentationMenu();
        toggleMainNav();
      })(document);
    </script>
    <script>
    (function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=
    function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;
    e=o.createElement(i);r=o.getElementsByTagName(i)[0];
    e.src='../../../../../../www.google-analytics.com/analytics.js';
    r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));
    ga('create','UA-24532603-1');ga('send','pageview');
    </script>
  </body>

<!-- Mirrored from developers.google.com/web/fundamentals/documentation/introduction-to-media/images/ by HTTrack Website Copier/3.x [XR&CO'2013], Wed, 07 May 2014 09:56:14 GMT -->
</html>
>>>>>>> origin/master
